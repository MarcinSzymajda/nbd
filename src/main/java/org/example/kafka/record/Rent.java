/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.example.kafka.record;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Rent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -547446168174744314L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Rent\",\"namespace\":\"org.example.kafka.record\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"client_id\",\"type\":\"int\"},{\"name\":\"court_id\",\"type\":\"int\"},{\"name\":\"rental_name\",\"type\":\"string\"},{\"name\":\"start_time\",\"type\":\"string\"},{\"name\":\"end_time\",\"type\":[\"string\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Rent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Rent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Rent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Rent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Rent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Rent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Rent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Rent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Rent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int id;
  private int client_id;
  private int court_id;
  private java.lang.CharSequence rental_name;
  private java.lang.CharSequence start_time;
  private java.lang.CharSequence end_time;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Rent() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param client_id The new value for client_id
   * @param court_id The new value for court_id
   * @param rental_name The new value for rental_name
   * @param start_time The new value for start_time
   * @param end_time The new value for end_time
   */
  public Rent(java.lang.Integer id, java.lang.Integer client_id, java.lang.Integer court_id, java.lang.CharSequence rental_name, java.lang.CharSequence start_time, java.lang.CharSequence end_time) {
    this.id = id;
    this.client_id = client_id;
    this.court_id = court_id;
    this.rental_name = rental_name;
    this.start_time = start_time;
    this.end_time = end_time;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return client_id;
    case 2: return court_id;
    case 3: return rental_name;
    case 4: return start_time;
    case 5: return end_time;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: client_id = (java.lang.Integer)value$; break;
    case 2: court_id = (java.lang.Integer)value$; break;
    case 3: rental_name = (java.lang.CharSequence)value$; break;
    case 4: start_time = (java.lang.CharSequence)value$; break;
    case 5: end_time = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public int getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(int value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'client_id' field.
   * @return The value of the 'client_id' field.
   */
  public int getClientId() {
    return client_id;
  }


  /**
   * Sets the value of the 'client_id' field.
   * @param value the value to set.
   */
  public void setClientId(int value) {
    this.client_id = value;
  }

  /**
   * Gets the value of the 'court_id' field.
   * @return The value of the 'court_id' field.
   */
  public int getCourtId() {
    return court_id;
  }


  /**
   * Sets the value of the 'court_id' field.
   * @param value the value to set.
   */
  public void setCourtId(int value) {
    this.court_id = value;
  }

  /**
   * Gets the value of the 'rental_name' field.
   * @return The value of the 'rental_name' field.
   */
  public java.lang.CharSequence getRentalName() {
    return rental_name;
  }


  /**
   * Sets the value of the 'rental_name' field.
   * @param value the value to set.
   */
  public void setRentalName(java.lang.CharSequence value) {
    this.rental_name = value;
  }

  /**
   * Gets the value of the 'start_time' field.
   * @return The value of the 'start_time' field.
   */
  public java.lang.CharSequence getStartTime() {
    return start_time;
  }


  /**
   * Sets the value of the 'start_time' field.
   * @param value the value to set.
   */
  public void setStartTime(java.lang.CharSequence value) {
    this.start_time = value;
  }

  /**
   * Gets the value of the 'end_time' field.
   * @return The value of the 'end_time' field.
   */
  public java.lang.CharSequence getEndTime() {
    return end_time;
  }


  /**
   * Sets the value of the 'end_time' field.
   * @param value the value to set.
   */
  public void setEndTime(java.lang.CharSequence value) {
    this.end_time = value;
  }

  /**
   * Creates a new Rent RecordBuilder.
   * @return A new Rent RecordBuilder
   */
  public static org.example.kafka.record.Rent.Builder newBuilder() {
    return new org.example.kafka.record.Rent.Builder();
  }

  /**
   * Creates a new Rent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Rent RecordBuilder
   */
  public static org.example.kafka.record.Rent.Builder newBuilder(org.example.kafka.record.Rent.Builder other) {
    if (other == null) {
      return new org.example.kafka.record.Rent.Builder();
    } else {
      return new org.example.kafka.record.Rent.Builder(other);
    }
  }

  /**
   * Creates a new Rent RecordBuilder by copying an existing Rent instance.
   * @param other The existing instance to copy.
   * @return A new Rent RecordBuilder
   */
  public static org.example.kafka.record.Rent.Builder newBuilder(org.example.kafka.record.Rent other) {
    if (other == null) {
      return new org.example.kafka.record.Rent.Builder();
    } else {
      return new org.example.kafka.record.Rent.Builder(other);
    }
  }

  /**
   * RecordBuilder for Rent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Rent>
    implements org.apache.avro.data.RecordBuilder<Rent> {

    private int id;
    private int client_id;
    private int court_id;
    private java.lang.CharSequence rental_name;
    private java.lang.CharSequence start_time;
    private java.lang.CharSequence end_time;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.example.kafka.record.Rent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.client_id)) {
        this.client_id = data().deepCopy(fields()[1].schema(), other.client_id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.court_id)) {
        this.court_id = data().deepCopy(fields()[2].schema(), other.court_id);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.rental_name)) {
        this.rental_name = data().deepCopy(fields()[3].schema(), other.rental_name);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.start_time)) {
        this.start_time = data().deepCopy(fields()[4].schema(), other.start_time);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.end_time)) {
        this.end_time = data().deepCopy(fields()[5].schema(), other.end_time);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Rent instance
     * @param other The existing instance to copy.
     */
    private Builder(org.example.kafka.record.Rent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.client_id)) {
        this.client_id = data().deepCopy(fields()[1].schema(), other.client_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.court_id)) {
        this.court_id = data().deepCopy(fields()[2].schema(), other.court_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.rental_name)) {
        this.rental_name = data().deepCopy(fields()[3].schema(), other.rental_name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.start_time)) {
        this.start_time = data().deepCopy(fields()[4].schema(), other.start_time);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.end_time)) {
        this.end_time = data().deepCopy(fields()[5].schema(), other.end_time);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public int getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.example.kafka.record.Rent.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.example.kafka.record.Rent.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'client_id' field.
      * @return The value.
      */
    public int getClientId() {
      return client_id;
    }


    /**
      * Sets the value of the 'client_id' field.
      * @param value The value of 'client_id'.
      * @return This builder.
      */
    public org.example.kafka.record.Rent.Builder setClientId(int value) {
      validate(fields()[1], value);
      this.client_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'client_id' field has been set.
      * @return True if the 'client_id' field has been set, false otherwise.
      */
    public boolean hasClientId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'client_id' field.
      * @return This builder.
      */
    public org.example.kafka.record.Rent.Builder clearClientId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'court_id' field.
      * @return The value.
      */
    public int getCourtId() {
      return court_id;
    }


    /**
      * Sets the value of the 'court_id' field.
      * @param value The value of 'court_id'.
      * @return This builder.
      */
    public org.example.kafka.record.Rent.Builder setCourtId(int value) {
      validate(fields()[2], value);
      this.court_id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'court_id' field has been set.
      * @return True if the 'court_id' field has been set, false otherwise.
      */
    public boolean hasCourtId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'court_id' field.
      * @return This builder.
      */
    public org.example.kafka.record.Rent.Builder clearCourtId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'rental_name' field.
      * @return The value.
      */
    public java.lang.CharSequence getRentalName() {
      return rental_name;
    }


    /**
      * Sets the value of the 'rental_name' field.
      * @param value The value of 'rental_name'.
      * @return This builder.
      */
    public org.example.kafka.record.Rent.Builder setRentalName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.rental_name = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'rental_name' field has been set.
      * @return True if the 'rental_name' field has been set, false otherwise.
      */
    public boolean hasRentalName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'rental_name' field.
      * @return This builder.
      */
    public org.example.kafka.record.Rent.Builder clearRentalName() {
      rental_name = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'start_time' field.
      * @return The value.
      */
    public java.lang.CharSequence getStartTime() {
      return start_time;
    }


    /**
      * Sets the value of the 'start_time' field.
      * @param value The value of 'start_time'.
      * @return This builder.
      */
    public org.example.kafka.record.Rent.Builder setStartTime(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.start_time = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'start_time' field has been set.
      * @return True if the 'start_time' field has been set, false otherwise.
      */
    public boolean hasStartTime() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'start_time' field.
      * @return This builder.
      */
    public org.example.kafka.record.Rent.Builder clearStartTime() {
      start_time = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'end_time' field.
      * @return The value.
      */
    public java.lang.CharSequence getEndTime() {
      return end_time;
    }


    /**
      * Sets the value of the 'end_time' field.
      * @param value The value of 'end_time'.
      * @return This builder.
      */
    public org.example.kafka.record.Rent.Builder setEndTime(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.end_time = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'end_time' field has been set.
      * @return True if the 'end_time' field has been set, false otherwise.
      */
    public boolean hasEndTime() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'end_time' field.
      * @return This builder.
      */
    public org.example.kafka.record.Rent.Builder clearEndTime() {
      end_time = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Rent build() {
      try {
        Rent record = new Rent();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.client_id = fieldSetFlags()[1] ? this.client_id : (java.lang.Integer) defaultValue(fields()[1]);
        record.court_id = fieldSetFlags()[2] ? this.court_id : (java.lang.Integer) defaultValue(fields()[2]);
        record.rental_name = fieldSetFlags()[3] ? this.rental_name : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.start_time = fieldSetFlags()[4] ? this.start_time : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.end_time = fieldSetFlags()[5] ? this.end_time : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Rent>
    WRITER$ = (org.apache.avro.io.DatumWriter<Rent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Rent>
    READER$ = (org.apache.avro.io.DatumReader<Rent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.id);

    out.writeInt(this.client_id);

    out.writeInt(this.court_id);

    out.writeString(this.rental_name);

    out.writeString(this.start_time);

    if (this.end_time == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.end_time);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readInt();

      this.client_id = in.readInt();

      this.court_id = in.readInt();

      this.rental_name = in.readString(this.rental_name instanceof Utf8 ? (Utf8)this.rental_name : null);

      this.start_time = in.readString(this.start_time instanceof Utf8 ? (Utf8)this.start_time : null);

      if (in.readIndex() != 0) {
        in.readNull();
        this.end_time = null;
      } else {
        this.end_time = in.readString(this.end_time instanceof Utf8 ? (Utf8)this.end_time : null);
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readInt();
          break;

        case 1:
          this.client_id = in.readInt();
          break;

        case 2:
          this.court_id = in.readInt();
          break;

        case 3:
          this.rental_name = in.readString(this.rental_name instanceof Utf8 ? (Utf8)this.rental_name : null);
          break;

        case 4:
          this.start_time = in.readString(this.start_time instanceof Utf8 ? (Utf8)this.start_time : null);
          break;

        case 5:
          if (in.readIndex() != 0) {
            in.readNull();
            this.end_time = null;
          } else {
            this.end_time = in.readString(this.end_time instanceof Utf8 ? (Utf8)this.end_time : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










